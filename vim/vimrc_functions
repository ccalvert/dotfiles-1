" Functions
" ------------------------------------------------------------

" Renames param1 tags to be param2 tags
function! RenameTag(param1, param2)
    :%s/<\(\/\?\)a:param1\(\_s*\)/<\1a:param2\2/gci
endfunction

" Strips the tag defined by the parameter (for html pages)
function! StripTag(TagName)
    :%s/a:TagName/hello/gci
    ":% s/<[^>]\+>//gci
endfunction

" Reverses all the lines in the file (top to bottom)
function! ReverseLines()
    :g/^/m0
endfunction

" Removes the ^M character from the end of every line
function! RemoveM()
    :%s/^M$//g
endfunction

" Replaces the ^M character with a carraige return native to the system
function! ReplaceM()
    :%s/^M/\r/g
endfunction

" Removes superfluous white space from the end of a line
function! RemoveWhiteSpace()
    let save_cursor = getpos(".")
    %s/\s*$//g
    call setpos('.', save_cursor)
endfunction

function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()
